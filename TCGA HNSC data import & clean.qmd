---
title: "TCGA HNSC DATA IMPORT & clean"
format: html
editor: visual
---

## Import data from https://xenabrowser.net/datapages/

```{r}

library(UCSCXenaTools)

data(XenaData)

head(XenaData)

#----------------------------------------------------------------
#-- Get clinical data from 
#----------------------------------------------------------------
# The options in XenaFilter function support Regular Expression
XenaGenerate(subset = XenaHostNames=="tcgaHub") %>% 
  XenaFilter(filterDatasets = "HNSC")%>%   #-> df_todo
  XenaFilter(filterDatasets = "clinicalMatrix")  -> df_todo

XenaQuery(df_todo) %>%
  XenaDownload() -> xe_download
cli = XenaPrepare(xe_download)
class(cli)
dim(cli)
names(cli)[grepl("race",names(cli))]
#getwd()
write.csv(cli, "ClinicalDataset.csv")

#----------------------------------------------------------------
#-- Get survival data 
#----------------------------------------------------------------
XenaGenerate(subset = XenaHostNames=="tcgaHub") %>% 
  XenaFilter(filterDatasets = "HNSC") %>%
  XenaFilter(filterDatasets = "survival")  -> df_todo

df_todo


#We can even directly browse the dataset Browse data
XenaBrowse(df_todo)

#-download the dataset
XenaQuery(df_todo) %>%
  XenaDownload() -> xe_download

sur = XenaPrepare(xe_download)
class(sur)
write.csv(sur,"SurvivalDataset.csv")

#----------------------------------------------------------------
#-- Get miRNA data 
#----------------------------------------------------------------
XenaGenerate(subset = XenaHostNames=="tcgaHub") %>% 
  XenaFilter(filterDatasets = "HNSC") %>%
  XenaFilter(filterDatasets = "miRNA_HiSeq")  -> df_todo

df_todo

XenaQuery(df_todo) %>%
  XenaDownload() -> xe_download

#Prepare data into R for analysis.
# download 08/20/19
miRNA = XenaPrepare(xe_download)

write.csv(miRNA,"miRNADataset.csv")

#*****************************************************
#  Get the mRNA data 
#*****************************************************

#XenaGenerate(subset = XenaHostNames=="gdcHub") %>% 
 # XenaFilter(filterDatasets = "HNSC") %>%
#  XenaFilter(filterDatasets = "htseq_fpkm.")  -> df_mRNAfpkm

#df_mRNAfpkm
#df_mRNAfpkm@datasets<-df_mRNAfpkm@datasets[1]
#df_mRNAfpkm@datasets

#XenaQuery(df_mRNAfpkm) %>%
 # XenaDownload() -> df_mRNAfpkm_download

#Prepare data into R for analysis.
# download 08/20/19
#mRNA = XenaPrepare(df_mRNAfpkm_download)
#write.csv(mRNA,"mRNADataset.csv")


#% end of code ofr now

##clear environment for saving space
rm(list=ls())

```

##Clincial Data

```{r}
#----------------------------------------------------------------
#-- Import clinical data 
#----------------------------------------------------------------
df_clincial <- read.csv("ClinicalDataset.csv")

## change . to - 
df_clincial$sampleID<-gsub("\\.", "-", df_clincial$sampleID)

## pick the data ending from 01-09
df_clincial<-subset(df_clincial, grepl("0[1-9]$", df_clincial$sampleID))
```

## clear survival data
```{r}
#----------------------------------------------------------------
#-- Import survival data
#----------------------------------------------------------------

df_survival <- read.csv("SurvivalDataset.csv")

## change . to - for "name" of first col 
df_survival$sample<-gsub("\\.", "-", df_survival$sample)

## pick the data from 01-09
df_survival<-subset(df_survival, grepl("0[1-9]$", df_survival$sample))


summary(df_survival$OS.time)
```

## clear miRNA data

```{r}
#----------------------------------------------------------------
#-- Import miRNA data 
#----------------------------------------------------------------


miRNADataset <- read.csv("miRNADataset.csv")


###Convert miRNA data format
df_transposed_miRNA<-t(miRNADataset)
df_miRNA<-as.data.frame(df_transposed_miRNA)


###setting up data  
df_miRNA$sample <- rownames(df_miRNA)
df_miRNA <- df_miRNA[, c('sample', setdiff(names(df_miRNA), 'sample'))]

df_miRNA<-df_miRNA[-1,]
colnames(df_miRNA)<-df_miRNA[1,]
df_miRNA<-df_miRNA[-1,]
rownames(df_miRNA) <- 1:nrow(df_miRNA)

## change . to - for "name" of first col 
df_miRNA$sample<-gsub("\\.", "-", df_miRNA$sample)

## pick the data from 01-09
df_miRNA<-subset(df_miRNA, grepl("0[1-9]$", df_miRNA$sample))


##clear environment for saving space
rm(miRNADataset)
rm(df_transposed_miRNA)




# clear the NA value data
df_miRNA <- df_miRNA[, colSums(is.na(df_miRNA)) == 0]

# Check if there are any NA values left in the dataset
anyNA(df_miRNA)

write.csv(df_miRNA, "df_miRNA.csv")
```

## Creat data set for runinng screen methods

### first data set: the number of miRNA is 258 (we got it from loading R enivrment.)

```{r}
#the path for loading the cleaned data by Dr. Zoh
load('RcodeData/Dataset/DataClean/DataClean.RData')#load R space environment

#Data set name called: miRNA_Final_052220
df258<-miRNA_Final_052220 # there are 258 miRNA variables

# Renaming the first column of df258 to 'sample'
colnames(df258)[1] <- "sample"

#Basing on the TCGA bar code information. Ending number from 01-09 mean cancer
df258<-subset(df258, grepl("0[1-9]$", df258$sample))


#creating data set for running screen method
subset_df <- df_survival[, c("sample", "OS", "OS.time")]

df258_sc<-merge(subset_df, df258, by = "sample")#sc mean that this data for running screen method


#check is there any NA value in the data
# Assuming df258_sc is your dataframe

# Find which columns have any NA values
na_columns <- colnames(df258_sc)[apply(df258_sc, 2, function(col) any(is.na(col)))]

# Print the columns
print(na_columns)

# Remove rows where 'OS.time' has NA values
df258_sc <- df258_sc[!is.na(df258_sc$OS.time), ]

# Identify columns with NA values
columns_with_na <- colnames(df258_sc)[apply(df258_sc, 2, function(col) any(is.na(col)))]
# Drop those columns from the dataframe
df258_sc <- df258_sc[, !(colnames(df258_sc) %in% columns_with_na)]



write.csv(df258_sc, "df258_sc.csv")


```

### Second data set:the number of miRNA is 290 (After the NA value, we got it)

```{r}
# Extract the desired columns
subset_df <- df_survival[, c("sample", "OS", "OS.time")]


df290<-df_miRNA

# Merge the new subset with df_miRNA based on the "sample" column
df290_sc <- merge(subset_df, df290, by = "sample")


# Find which columns have any NA values
na_columns <- colnames(df290_sc)[apply(df290_sc, 2, function(col) any(is.na(col)))]

# Print the columns
print(na_columns)

# Remove rows where 'OS.time' has NA values
df290_sc <- df290_sc[!is.na(df290_sc$OS.time), ]


write.csv(df290_sc, "df290_sc.csv")


# Check if all columns of df258_sc are in df290_sc
are_all_columns_present <- all(names(df258_sc) %in% names(df290_sc))

print(are_all_columns_present)


##since all miRNA variables from df258_sc are also in the df290_sc, we do not need to combine these two data sets together.

```

### Third data set: combining the two data set. (only keeping unique variable)

```{r}

# Identifying overlapping columns
#overlap_cols <- intersect(names(df290), names(df258))

# Removing overlapping columns from one of the data frames (for this example, from df258)
#df290 <- df290[, !(names(df290) %in% overlap_cols)]


# Combine the data frames column-wise
#combined_df <- cbind(df258, df290)

# survival status data
#subset_df <- df_survival[, c("sample", "OS", "OS.time")]

# Merge the new subset with df_miRNA based on the "sample" column
#df381_sc <- merge(subset_df, combined_df, by = "sample")

# Check for duplicate column names
#duplicate_cols <- names(df381_sc)[duplicated(names(df381_sc))]

#if(length(duplicate_cols) == 0) {
 # print("All column names are unique.")
#} else {
#  print(paste("Duplicate column names:", paste(duplicate_cols, collapse=", ")))
#}


# Find which columns have any NA values
#na_columns <- colnames(df381_sc)[apply(df381_sc, 2, function(col) any(is.na(col)))]
# Print the columns
#print(na_columns)

# Remove rows where 'OS.time' has NA values
#df381_sc <- df381_sc[!is.na(df381_sc$OS.time), ]
# Remove columns with any NA values
#df381_sc <- df381_sc[, !apply(df381_sc, 2, function(col) any(is.na(col)))]


#df290<-df_miRNA
#rm(subset_df)
#rm(combined_df)
#rm(overlap_cols)
#rm(duplicate_cols)

#write.csv(df381_sc, "df381_sc.csv")


#are_colnames_same <- setequal(colnames(df290_sc), colnames(df381_sc))

#if (are_colnames_same) {
 # print("The two datasets have the same column names.")
#} else {
 # print("The two datasets do not have the same column names.")
#}

```

```{r}
# Identify unique columns from each dataframe
#unique_cols_df258 <- setdiff(colnames(df258), colnames(df290))
#unique_cols_df290 <- setdiff(colnames(df290), colnames(df258))


#variables <- unique_cols_df258  # ... represents the rest of your variables

#na_columns <- sapply(variables, function(var) {
 # anyNA(df258[[var]])
#})

#na_columns_names <- names(na_columns[na_columns == TRUE])

#if(length(na_columns_names) > 0) {
#  cat("These columns have NA values:\n")
 # print(na_columns_names)
#} else {
#  print("None of the specified columns have NA values.")
#}


# Combine the unique columns from each dataframe
#merged_df <- cbind(df258[unique_cols_df258], df290[unique_cols_df290])

# If you want to also include columns that are common to both dataframes (but only once), you can add:
#common_cols <- intersect(colnames(df258), colnames(df290))
#merged_df <- cbind(df258[common_cols], merged_df)

```

## Adding lymp vairable to the datasets

### first data set: the number of miRNA is 258

```{r}
#creating data set for running screen method
subset_df <- df_clincial[, c("sampleID", "lymphovascular_invasion_present")]
#change colmanes
colnames(subset_df)[colnames(subset_df) == "sampleID"] <- "sample"
colnames(subset_df)[colnames(subset_df) == "lymphovascular_invasion_present"] <- "lym_invasion"

df258_LVI<-merge(subset_df, df258_sc, by = "sample")


# Remove rows with NA values in the lymphovascular_invasion_present column
df258_LVI <- df258_LVI[!is.na(df258_LVI$lym_invasion), ]

# Convert "YES" to 1 and "NO" to 0
df258_LVI$lym_invasion <- ifelse(df258_LVI$lym_invasion == "YES", 1, 0)



write.csv(df258_LVI, "df258_LVI.csv")
```

### Second data set:the number of miRNA is 290 (After the NA value, we got it)

```{r}

#creating data set for running screen method
subset_df <- df_clincial[, c("sampleID", "lymphovascular_invasion_present")]
colnames(subset_df)[colnames(subset_df) == "sampleID"] <- "sample"
colnames(subset_df)[colnames(subset_df) == "lymphovascular_invasion_present"] <- "lym_invasion"

df290_LVI<-merge(subset_df, df290_sc, by = "sample")


# Remove rows with NA values in the lymphovascular_invasion_present column
df290_LVI <- df290_LVI[!is.na(df290_LVI$lym_invasion), ]

# Convert "YES" to 1 and "NO" to 0
df290_LVI$lym_invasion <- ifelse(df290_LVI$lym_invasion == "YES", 1, 0)



write.csv(df290_LVI, "df290_LVI.csv")



```

### Third data set: combining the two data set. (only keeping unique variable)

```{r}

#creating data set for running screen method
#subset_df <- df_clincial[, c("sampleID", "lymphovascular_invasion_present")]
#colnames(subset_df)[colnames(subset_df) == "sampleID"] <- "sample"
#colnames(subset_df)[colnames(subset_df) == "lymphovascular_invasion_present"] <- "lym_invasion"

#df381_LVI<-merge(subset_df, df381_sc, by = "sample")

#table(df381_LVI$lym_invasion)
#sum(is.na(df381_LVI$lym_invasion))

# Remove rows with NA values in the lymphovascular_invasion_present column
#df381_LVI <- df381_LVI[!is.na(df381_LVI$lym_invasion), ]

# Convert "YES" to 1 and "NO" to 0
#df381_LVI$lym_invasion <- ifelse(df381_LVI$lym_invasion == "YES", 1, 0)

#write.csv(df381_LVI, "df381_LVI.csv")

```

## Usefull method for checking MIMAT code to hsp-mir name.

```{r}
#http://mirandola.iit.cnr.it/converter.php

if(!require("BiocManager",quietly=T))
  install.packages("BiocManager")

BiocManager::install("miRBaseConverter")

#----------------------------------------------------------------
#-- EXAMPLE
#----------------------------------------------------------------

library(miRBaseConverter)
    
    #####1,The input is a miRNA Name
    miRNAName="hsa-miR-95-3p"
    result1=miRNA_NameToAccession(miRNAName,version="v22")
    result1
    Accession=result1$Accession
    result2=getMiRNAHistory(Accession)
    result2
    
    #####2,The input is miRNA Accession
    Accession="MIMAT0000253"
    result3=getMiRNAHistory(Accession)
    result3
```
